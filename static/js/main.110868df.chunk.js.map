{"version":3,"sources":["services/weatherService.ts","utils/weatherUtils.ts","components/LocationWeather/Weather.tsx","components/LocationWeather/LocationWeather.tsx","hooks/useLocationWeather.ts","hooks/useLocationSearch.ts","hooks/useDebounce.ts","assets/search.svg","components/Autocomplete/Autocomplete.tsx","components/SearchBar/SearchBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","defaults","baseURL","term","a","get","params","query","data","map","location","id","woeid","type","location_type","name","title","locationId","consolidated_weather","consolidatedWeather","weather","minTemp","min_temp","maxTemp","max_temp","date","applicable_date","LOCALE","getWeekDay","dateString","Date","toLocaleDateString","isToday","weekday","getCelsius","value","Math","round","Weather","props","day","year","month","className","LocationWeather","numOfDays","isNumber","handler","useCallback","WeatherService","getLocationWeather","useQuery","enabled","isLoading","error","slice","useLocationWeather","role","useLocationSearch","useState","setQuery","searchText","delay","debouncedValue","setDebouncedValue","useEffect","setTimeout","clearTimeout","useDebounce","search","searchLocations","locations","noOptionsMessage","Control","children","src","searchIcon","alt","Autocomplete","labelKey","valueKey","items","placeholder","loading","onChange","onSelect","autoFocus","isClearable","getOptionLabel","item","getOptionValue","options","components","onInputChange","find","toString","toLowerCase","includes","option","actionMeta","action","SearchBar","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","staleTime","App","setLocation","client","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.110868df.chunk.js","sourcesContent":["import axios from \"axios\";\nimport {\n    IConsolidatedWeather,\n    ILocation,\n    ILocationResponse,\n    ILocationWeatherResponse,\n    IWeather,\n} from \"../types\";\n\naxios.defaults.baseURL = \"https://www.metaweather.com\";\n\nclass WeatherService {\n    async searchLocations(term: string): Promise<ILocation[]> {\n        const { data = [] } = await axios.get<ILocationResponse[]>(\"/api/location/search/\", {\n            params: {\n                query: term,\n            },\n        });\n\n        return data.map<ILocation>((location: ILocationResponse) => {\n            const { woeid: id, location_type: type, title: name } = location;\n\n            return {\n                id,\n                name,\n                type,\n            };\n        });\n    }\n\n    async getLocationWeather(locationId: number): Promise<IWeather[]> {\n        const { data } = await axios.get<ILocationWeatherResponse>(`/api/location/${locationId}/`);\n        const { consolidated_weather: consolidatedWeather = [] } = data;\n\n        return consolidatedWeather.map<IWeather>((weather: IConsolidatedWeather) => {\n            const { id, min_temp: minTemp, max_temp: maxTemp, applicable_date: date } = weather;\n\n            return { id, minTemp, maxTemp, date };\n        });\n    }\n}\n\nexport default new WeatherService();\n","const LOCALE = \"en-US\";\n\nexport function isToday(date: Date) {\n    return date.toLocaleDateString(LOCALE) === new Date().toLocaleDateString(LOCALE);\n}\n\nexport function getWeekDay(dateString: string): string {\n    const date = new Date(dateString);\n\n    if (isToday(date)) {\n        return \"Today\";\n    }\n\n    return date.toLocaleDateString(LOCALE, { weekday: \"long\" });\n}\n\nexport function getDateString(dateString: string): string {\n    return new Date(dateString).toLocaleDateString(LOCALE, {\n        year: \"numeric\",\n        month: \"short\",\n        day: \"numeric\",\n    });\n}\n\nexport function getCelsius(value: number): string {\n    return `${Math.round(value)}Â°C`;\n}\n","import { IWeather } from \"../../types\";\nimport { getCelsius, getDateString, getWeekDay } from \"../../utils/weatherUtils\";\n\ninterface IWeatherProps {\n    data: IWeather;\n}\n\nexport default function Weather(props: IWeatherProps) {\n    const { data } = props;\n    const day = getWeekDay(data.date);\n    const date = getDateString(data.date);\n    const minTemp = getCelsius(data.minTemp);\n    const maxTemp = getCelsius(data.maxTemp);\n\n    return (\n        <div className=\"card\">\n            <div className=\"card-header\">\n                <h5 className=\"card-title\">{day}</h5>\n                <p className=\"card-subtitle text-muted\">{date}</p>\n            </div>\n            <div className=\"card-body\">\n                <div className=\"card-text\">\n                    <div>Min: {minTemp}</div>\n                    <div>Max: {maxTemp}</div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import { useLocationWeather } from \"../../hooks/useLocationWeather\";\nimport { ILocation, IWeather } from \"../../types\";\nimport Weather from \"./Weather\";\n\nimport \"./LocationWeather.scss\";\n\ninterface ILocationWeatherProps {\n    location?: ILocation;\n}\n\nexport default function LocationWeather(props: ILocationWeatherProps) {\n    const { location } = props;\n    const { isLoading, data } = useLocationWeather(location?.id);\n\n    return (\n        <div className=\"LocationWeather py-4\">\n            <div className=\"container\">\n                <div className=\"text-center mb-3\">\n                    <h3 className=\"text-primary\">{location?.name}</h3>\n                    {isLoading && <h4>...</h4>}\n                </div>\n                <div className=\"row\" role=\"listbox\">\n                    {data.map((weather: IWeather) => (\n                        <div key={weather.id} className=\"col py-3\" role=\"listitem\">\n                            <Weather data={weather} />\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n}\n","import { AxiosError } from \"axios\";\nimport { useCallback } from \"react\";\nimport { useQuery } from \"react-query\";\nimport WeatherService from \"../services/weatherService\";\nimport { IWeather } from \"../types\";\n\ninterface ILocationWeatherHook {\n    isLoading: boolean;\n    data: IWeather[];\n    error: AxiosError | null;\n}\n\nexport function useLocationWeather(locationId?: number, numOfDays: number = 5): ILocationWeatherHook {\n    const isNumber = typeof locationId === \"number\";\n    const handler = useCallback(\n        () => (isNumber ? WeatherService.getLocationWeather(locationId) : []),\n        [locationId, isNumber],\n    );\n\n    const {\n        isLoading,\n        data = [],\n        error,\n    } = useQuery<IWeather[], AxiosError>([\"locationWeather\", locationId], handler, { enabled: isNumber });\n\n    return {\n        isLoading,\n        data: data.slice(0, numOfDays),\n        error,\n    };\n}\n","import { AxiosError } from \"axios\";\nimport { useCallback, useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport WeatherService from \"../services/weatherService\";\nimport { ILocation, onChangeCallback } from \"../types\";\nimport useDebounce from \"./useDebounce\";\n\ninterface IUsePlaceSearchHook {\n    isLoading: boolean;\n    locations: ILocation[];\n    search: onChangeCallback;\n    error: AxiosError | null;\n}\n\nexport function useLocationSearch(): IUsePlaceSearchHook {\n    const [query, setQuery] = useState<string>(\"\");\n    const searchText = useDebounce<string>(query);\n    const search = useCallback<onChangeCallback>((value: string) => setQuery(value), []);\n    const handler = useCallback(() => WeatherService.searchLocations(searchText), [searchText]);\n\n    const {\n        isLoading,\n        data: locations = [],\n        error,\n    } = useQuery<ILocation[], AxiosError>([\"locations\", searchText], handler, { enabled: !!searchText });\n\n    return {\n        isLoading,\n        locations,\n        search,\n        error,\n    };\n}\n","import { useEffect, useState } from \"react\";\n\nexport default function useDebounce<T>(value: T, delay: number = 500): T {\n    const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n    useEffect(() => {\n        const handler: NodeJS.Timeout = setTimeout(() => {\n            setDebouncedValue(value);\n        }, delay);\n\n        // Cancel the timeout if value changes or unmount\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [value, delay]);\n\n    return debouncedValue;\n}\n","export default __webpack_public_path__ + \"static/media/search.65a7fd14.svg\";","import React from \"react\";\nimport Select, { ActionMeta, components, ControlProps } from \"react-select\";\nimport { onChangeCallback } from \"../../types\";\nimport searchIcon from \"../../assets/search.svg\";\n\nimport \"./Autocomplete.scss\";\n\ntype JSONObject = Record<string, any>;\n\ninterface IAutoCompleteProps<TData extends JSONObject> {\n    placeholder?: string;\n    labelKey: keyof TData;\n    valueKey: keyof TData;\n    items: TData[];\n    loading?: boolean;\n    onChange: onChangeCallback;\n    onSelect: (item: TData) => void;\n}\n\nconst noOptionsMessage = () => \"No results\";\n\nconst Control = <TData extends JSONObject>({ children, ...props }: ControlProps<TData, false>) => {\n    return (\n        <components.Control {...props}>\n            <div className=\"Autocomplete__leadingIcon\">\n                <img src={searchIcon} alt=\"Search\" />\n            </div>\n            {children}\n        </components.Control>\n    );\n};\n\nexport default function Autocomplete<TData extends JSONObject>(props: IAutoCompleteProps<TData>) {\n    const { labelKey, valueKey, items, placeholder, loading, onChange, onSelect } = props;\n\n    const getOptionValue = (item: TData) => item[valueKey];\n    const getOptionLabel = (item: TData) => item[labelKey];\n\n    const onOptionChanged = (value: string) => {\n        // prevent calling API if the item is already existing\n        const item = items.find((item: TData) =>\n            item[labelKey].toString().toLowerCase().includes(value.toLowerCase()),\n        );\n\n        if (!item) {\n            onChange(value);\n        }\n    };\n\n    const onOptionSelected = (option: TData | null, actionMeta: ActionMeta<TData>) => {\n        if (actionMeta.action === \"clear\") {\n            onChange(\"\");\n            return;\n        }\n\n        if (actionMeta.action === \"select-option\" && option) {\n            onSelect(option);\n        }\n    };\n\n    return (\n        <Select\n            autoFocus\n            isClearable\n            className=\"Autocomplete\"\n            placeholder={placeholder}\n            getOptionLabel={getOptionLabel}\n            getOptionValue={getOptionValue}\n            options={items}\n            isLoading={loading}\n            components={{ Control }}\n            noOptionsMessage={noOptionsMessage}\n            onInputChange={onOptionChanged}\n            onChange={onOptionSelected}\n        />\n    );\n}\n","import React from \"react\";\nimport { useLocationSearch } from \"../../hooks/useLocationSearch\";\nimport { ILocation } from \"../../types\";\nimport Autocomplete from \"../Autocomplete/Autocomplete\";\nimport \"./SearchBar.scss\";\n\ninterface ISearchBarProps {\n    onSelect: (location: ILocation) => void;\n}\n\nexport default function SearchBar(props: ISearchBarProps) {\n    const { onSelect } = props;\n    const { isLoading, locations, search } = useLocationSearch();\n\n    return (\n        <div className=\"SearchBar app-bar navbar bg-dark\">\n            <div className=\"container py-3\">\n                <Autocomplete\n                    labelKey=\"name\"\n                    valueKey=\"id\"\n                    placeholder=\"Search city...\"\n                    items={locations}\n                    loading={isLoading}\n                    onChange={search}\n                    onSelect={onSelect}\n                />\n            </div>\n        </div>\n    );\n}\n","import React, { useState } from \"react\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport LocationWeather from \"./components/LocationWeather/LocationWeather\";\nimport SearchBar from \"./components/SearchBar/SearchBar\";\nimport \"./styles/main.scss\";\nimport { ILocation } from \"./types\";\n\nconst queryClient = new QueryClient({\n    defaultOptions: {\n        queries: { refetchOnWindowFocus: false, staleTime: 300000 },\n    },\n});\n\nfunction App() {\n    const [location, setLocation] = useState<ILocation>();\n\n    return (\n        <div className=\"App\">\n            <QueryClientProvider client={queryClient}>\n                <SearchBar onSelect={setLocation} />\n                <LocationWeather location={location} />\n            </QueryClientProvider>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}